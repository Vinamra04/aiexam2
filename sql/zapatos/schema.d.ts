/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2023 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **exam**
   * - Table in database
   */
  export namespace exam {
    export type Table = 'exam';
    export interface Selectable {
      /**
      * **exam.batch**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      batch: string;
      /**
      * **exam.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **exam.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id: number;
      /**
      * **exam.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **exam.duration**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      duration: number;
      /**
      * **exam.exam_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('exam_exam_id_seq'::regclass)`
      */
      exam_id: number;
      /**
      * **exam.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id: number;
      /**
      * **exam.start_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      start_at: Date;
      /**
      * **exam.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status: boolean;
      /**
      * **exam.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title: string;
    }
    export interface JSONSelectable {
      /**
      * **exam.batch**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      batch: string;
      /**
      * **exam.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampString;
      /**
      * **exam.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id: number;
      /**
      * **exam.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string;
      /**
      * **exam.duration**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      duration: number;
      /**
      * **exam.exam_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('exam_exam_id_seq'::regclass)`
      */
      exam_id: number;
      /**
      * **exam.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id: number;
      /**
      * **exam.start_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      start_at: db.TimestampString;
      /**
      * **exam.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status: boolean;
      /**
      * **exam.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title: string;
    }
    export interface Whereable {
      /**
      * **exam.batch**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      batch?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam.duration**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      duration?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam.exam_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('exam_exam_id_seq'::regclass)`
      */
      exam_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam.start_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      start_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **exam.batch**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      batch: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **exam.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **exam.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **exam.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **exam.duration**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      duration?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **exam.exam_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('exam_exam_id_seq'::regclass)`
      */
      exam_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **exam.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **exam.start_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      start_at: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment;
      /**
      * **exam.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **exam.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **exam.batch**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      batch?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **exam.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **exam.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **exam.description**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **exam.duration**
      * - `int4` in database
      * - `NOT NULL`, default: `0`
      */
      duration?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **exam.exam_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('exam_exam_id_seq'::regclass)`
      */
      exam_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **exam.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **exam.start_at**
      * - `timestamp` in database
      * - `NOT NULL`, no default
      */
      start_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment>;
      /**
      * **exam.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **exam.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'exam_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **exam_chat**
   * - Table in database
   */
  export namespace exam_chat {
    export type Table = 'exam_chat';
    export interface Selectable {
      /**
      * **exam_chat.chat_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      chat_id: string;
      /**
      * **exam_chat.chat_log**
      * - `jsonb` in database
      * - Nullable, no default
      */
      chat_log: db.JSONValue | null;
      /**
      * **exam_chat.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **exam_chat.exam_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      exam_id: number;
      /**
      * **exam_chat.participant_email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      participant_email: string;
      /**
      * **exam_chat.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status: boolean;
      /**
      * **exam_chat.student_group_id**
      * - `int4` in database
      * - Nullable, no default
      */
      student_group_id: number | null;
      /**
      * **exam_chat.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **exam_chat.chat_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      chat_id: string;
      /**
      * **exam_chat.chat_log**
      * - `jsonb` in database
      * - Nullable, no default
      */
      chat_log: db.JSONValue | null;
      /**
      * **exam_chat.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampString;
      /**
      * **exam_chat.exam_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      exam_id: number;
      /**
      * **exam_chat.participant_email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      participant_email: string;
      /**
      * **exam_chat.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status: boolean;
      /**
      * **exam_chat.student_group_id**
      * - `int4` in database
      * - Nullable, no default
      */
      student_group_id: number | null;
      /**
      * **exam_chat.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: db.TimestampString;
    }
    export interface Whereable {
      /**
      * **exam_chat.chat_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      chat_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam_chat.chat_log**
      * - `jsonb` in database
      * - Nullable, no default
      */
      chat_log?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam_chat.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam_chat.exam_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      exam_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam_chat.participant_email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      participant_email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam_chat.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam_chat.student_group_id**
      * - `int4` in database
      * - Nullable, no default
      */
      student_group_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam_chat.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **exam_chat.chat_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      chat_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **exam_chat.chat_log**
      * - `jsonb` in database
      * - Nullable, no default
      */
      chat_log?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
      /**
      * **exam_chat.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **exam_chat.exam_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      exam_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **exam_chat.participant_email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      participant_email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **exam_chat.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **exam_chat.student_group_id**
      * - `int4` in database
      * - Nullable, no default
      */
      student_group_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **exam_chat.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **exam_chat.chat_id**
      * - `uuid` in database
      * - `NOT NULL`, default: `gen_random_uuid()`
      */
      chat_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **exam_chat.chat_log**
      * - `jsonb` in database
      * - Nullable, no default
      */
      chat_log?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **exam_chat.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **exam_chat.exam_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      exam_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **exam_chat.participant_email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      participant_email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **exam_chat.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **exam_chat.student_group_id**
      * - `int4` in database
      * - Nullable, no default
      */
      student_group_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **exam_chat.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'exam_chat_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **exam_participant**
   * - Table in database
   */
  export namespace exam_participant {
    export type Table = 'exam_participant';
    export interface Selectable {
      /**
      * **exam_participant.exam_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      exam_id: number;
      /**
      * **exam_participant.exam_participant_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('exam_participant_exam_participant_id_seq'::regclass)`
      */
      exam_participant_id: number;
      /**
      * **exam_participant.participant_email**
      * - `varchar` in database
      * - Nullable, no default
      */
      participant_email: string | null;
      /**
      * **exam_participant.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status: boolean;
      /**
      * **exam_participant.student_group_id**
      * - `int4` in database
      * - Nullable, no default
      */
      student_group_id: number | null;
    }
    export interface JSONSelectable {
      /**
      * **exam_participant.exam_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      exam_id: number;
      /**
      * **exam_participant.exam_participant_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('exam_participant_exam_participant_id_seq'::regclass)`
      */
      exam_participant_id: number;
      /**
      * **exam_participant.participant_email**
      * - `varchar` in database
      * - Nullable, no default
      */
      participant_email: string | null;
      /**
      * **exam_participant.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status: boolean;
      /**
      * **exam_participant.student_group_id**
      * - `int4` in database
      * - Nullable, no default
      */
      student_group_id: number | null;
    }
    export interface Whereable {
      /**
      * **exam_participant.exam_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      exam_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam_participant.exam_participant_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('exam_participant_exam_participant_id_seq'::regclass)`
      */
      exam_participant_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam_participant.participant_email**
      * - `varchar` in database
      * - Nullable, no default
      */
      participant_email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam_participant.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **exam_participant.student_group_id**
      * - `int4` in database
      * - Nullable, no default
      */
      student_group_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **exam_participant.exam_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      exam_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **exam_participant.exam_participant_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('exam_participant_exam_participant_id_seq'::regclass)`
      */
      exam_participant_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **exam_participant.participant_email**
      * - `varchar` in database
      * - Nullable, no default
      */
      participant_email?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **exam_participant.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **exam_participant.student_group_id**
      * - `int4` in database
      * - Nullable, no default
      */
      student_group_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **exam_participant.exam_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      exam_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **exam_participant.exam_participant_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('exam_participant_exam_participant_id_seq'::regclass)`
      */
      exam_participant_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **exam_participant.participant_email**
      * - `varchar` in database
      * - Nullable, no default
      */
      participant_email?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **exam_participant.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **exam_participant.student_group_id**
      * - `int4` in database
      * - Nullable, no default
      */
      student_group_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'exam_participant_exam_id_participant_email_student_group_id_key' | 'exam_participant_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **flag**
   * - Table in database
   */
  export namespace flag {
    export type Table = 'flag';
    export interface Selectable {
      /**
      * **flag.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **flag.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id: number;
      /**
      * **flag.flag_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('flag_flag_id_seq'::regclass)`
      */
      flag_id: number;
      /**
      * **flag.flag_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      flag_name: string;
      /**
      * **flag.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status: boolean;
    }
    export interface JSONSelectable {
      /**
      * **flag.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampString;
      /**
      * **flag.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id: number;
      /**
      * **flag.flag_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('flag_flag_id_seq'::regclass)`
      */
      flag_id: number;
      /**
      * **flag.flag_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      flag_name: string;
      /**
      * **flag.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status: boolean;
    }
    export interface Whereable {
      /**
      * **flag.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **flag.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **flag.flag_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('flag_flag_id_seq'::regclass)`
      */
      flag_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **flag.flag_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      flag_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **flag.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **flag.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **flag.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **flag.flag_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('flag_flag_id_seq'::regclass)`
      */
      flag_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **flag.flag_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      flag_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **flag.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **flag.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **flag.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **flag.flag_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('flag_flag_id_seq'::regclass)`
      */
      flag_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **flag.flag_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      flag_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **flag.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'flag_flag_name_key' | 'flag_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **group_membership**
   * - Table in database
   */
  export namespace group_membership {
    export type Table = 'group_membership';
    export interface Selectable {
      /**
      * **group_membership.student_email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      student_email: string;
      /**
      * **group_membership.student_group_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      student_group_id: number;
    }
    export interface JSONSelectable {
      /**
      * **group_membership.student_email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      student_email: string;
      /**
      * **group_membership.student_group_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      student_group_id: number;
    }
    export interface Whereable {
      /**
      * **group_membership.student_email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      student_email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **group_membership.student_group_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      student_group_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **group_membership.student_email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      student_email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **group_membership.student_group_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      student_group_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **group_membership.student_email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      student_email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **group_membership.student_group_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      student_group_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'group_membership_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **open_ai_assistant**
   * - Table in database
   */
  export namespace open_ai_assistant {
    export type Table = 'open_ai_assistant';
    export interface Selectable {
      /**
      * **open_ai_assistant.assistant_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      assistant_id: string;
      /**
      * **open_ai_assistant.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **open_ai_assistant.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('open_ai_assistant_id_seq'::regclass)`
      */
      id: number;
      /**
      * **open_ai_assistant.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id: number;
    }
    export interface JSONSelectable {
      /**
      * **open_ai_assistant.assistant_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      assistant_id: string;
      /**
      * **open_ai_assistant.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampString;
      /**
      * **open_ai_assistant.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('open_ai_assistant_id_seq'::regclass)`
      */
      id: number;
      /**
      * **open_ai_assistant.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id: number;
    }
    export interface Whereable {
      /**
      * **open_ai_assistant.assistant_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      assistant_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **open_ai_assistant.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **open_ai_assistant.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('open_ai_assistant_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **open_ai_assistant.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **open_ai_assistant.assistant_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      assistant_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **open_ai_assistant.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **open_ai_assistant.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('open_ai_assistant_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **open_ai_assistant.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **open_ai_assistant.assistant_id**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      assistant_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **open_ai_assistant.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **open_ai_assistant.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('open_ai_assistant_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **open_ai_assistant.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'open_ai_assistant_persona_id_key' | 'open_ai_assistant_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **persona**
   * - Table in database
   */
  export namespace persona {
    export type Table = 'persona';
    export interface Selectable {
      /**
      * **persona.category**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      category: string;
      /**
      * **persona.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **persona.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id: number;
      /**
      * **persona.persona_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('persona_persona_id_seq'::regclass)`
      */
      persona_id: number;
      /**
      * **persona.prompt**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      prompt: string;
      /**
      * **persona.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status: boolean;
      /**
      * **persona.subcategory**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      subcategory: string;
      /**
      * **persona.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title: string;
    }
    export interface JSONSelectable {
      /**
      * **persona.category**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      category: string;
      /**
      * **persona.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampString;
      /**
      * **persona.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id: number;
      /**
      * **persona.persona_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('persona_persona_id_seq'::regclass)`
      */
      persona_id: number;
      /**
      * **persona.prompt**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      prompt: string;
      /**
      * **persona.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status: boolean;
      /**
      * **persona.subcategory**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      subcategory: string;
      /**
      * **persona.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title: string;
    }
    export interface Whereable {
      /**
      * **persona.category**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      category?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **persona.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **persona.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **persona.persona_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('persona_persona_id_seq'::regclass)`
      */
      persona_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **persona.prompt**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      prompt?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **persona.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **persona.subcategory**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      subcategory?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **persona.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **persona.category**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      category: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **persona.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **persona.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **persona.persona_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('persona_persona_id_seq'::regclass)`
      */
      persona_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **persona.prompt**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      prompt: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **persona.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **persona.subcategory**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      subcategory: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **persona.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **persona.category**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      category?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **persona.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **persona.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **persona.persona_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('persona_persona_id_seq'::regclass)`
      */
      persona_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **persona.prompt**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      prompt?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **persona.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **persona.subcategory**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      subcategory?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **persona.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'persona_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **persona_access**
   * - Table in database
   */
  export namespace persona_access {
    export type Table = 'persona_access';
    export interface Selectable {
      /**
      * **persona_access.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **persona_access.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id: number;
      /**
      * **persona_access.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status: boolean;
      /**
      * **persona_access.user_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      user_id: number;
    }
    export interface JSONSelectable {
      /**
      * **persona_access.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampString;
      /**
      * **persona_access.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id: number;
      /**
      * **persona_access.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status: boolean;
      /**
      * **persona_access.user_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      user_id: number;
    }
    export interface Whereable {
      /**
      * **persona_access.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **persona_access.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **persona_access.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **persona_access.user_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      user_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **persona_access.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **persona_access.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **persona_access.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **persona_access.user_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      user_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **persona_access.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **persona_access.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **persona_access.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **persona_access.user_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      user_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'persona_access_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **persona_flag**
   * - Table in database
   */
  export namespace persona_flag {
    export type Table = 'persona_flag';
    export interface Selectable {
      /**
      * **persona_flag.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **persona_flag.flag_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      flag_id: number;
      /**
      * **persona_flag.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id: number;
    }
    export interface JSONSelectable {
      /**
      * **persona_flag.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampString;
      /**
      * **persona_flag.flag_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      flag_id: number;
      /**
      * **persona_flag.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id: number;
    }
    export interface Whereable {
      /**
      * **persona_flag.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **persona_flag.flag_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      flag_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **persona_flag.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **persona_flag.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **persona_flag.flag_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      flag_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **persona_flag.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **persona_flag.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **persona_flag.flag_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      flag_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **persona_flag.persona_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      persona_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'persona_flag_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **student_group**
   * - Table in database
   */
  export namespace student_group {
    export type Table = 'student_group';
    export interface Selectable {
      /**
      * **student_group.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id: number;
      /**
      * **student_group.student_group_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('student_group_student_group_id_seq'::regclass)`
      */
      student_group_id: number;
      /**
      * **student_group.student_group_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      student_group_name: string;
    }
    export interface JSONSelectable {
      /**
      * **student_group.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id: number;
      /**
      * **student_group.student_group_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('student_group_student_group_id_seq'::regclass)`
      */
      student_group_id: number;
      /**
      * **student_group.student_group_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      student_group_name: string;
    }
    export interface Whereable {
      /**
      * **student_group.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **student_group.student_group_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('student_group_student_group_id_seq'::regclass)`
      */
      student_group_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **student_group.student_group_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      student_group_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **student_group.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **student_group.student_group_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('student_group_student_group_id_seq'::regclass)`
      */
      student_group_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **student_group.student_group_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      student_group_name: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **student_group.created_by_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      created_by_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **student_group.student_group_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('student_group_student_group_id_seq'::regclass)`
      */
      student_group_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **student_group.student_group_name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      student_group_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'student_group_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **user**
   * - Table in database
   */
  export namespace user {
    export type Table = 'user';
    export interface Selectable {
      /**
      * **user.college**
      * - `varchar` in database
      * - Nullable, no default
      */
      college: string | null;
      /**
      * **user.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **user.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **user.last_login_at**
      * - `timestamp` in database
      * - Nullable, no default
      */
      last_login_at: Date | null;
      /**
      * **user.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **user.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **user.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role: string;
      /**
      * **user.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status: boolean;
      /**
      * **user.subject**
      * - `varchar` in database
      * - Nullable, no default
      */
      subject: string | null;
      /**
      * **user.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: Date;
      /**
      * **user.user_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_user_id_seq'::regclass)`
      */
      user_id: number;
    }
    export interface JSONSelectable {
      /**
      * **user.college**
      * - `varchar` in database
      * - Nullable, no default
      */
      college: string | null;
      /**
      * **user.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampString;
      /**
      * **user.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **user.last_login_at**
      * - `timestamp` in database
      * - Nullable, no default
      */
      last_login_at: db.TimestampString | null;
      /**
      * **user.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **user.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password: string;
      /**
      * **user.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role: string;
      /**
      * **user.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status: boolean;
      /**
      * **user.subject**
      * - `varchar` in database
      * - Nullable, no default
      */
      subject: string | null;
      /**
      * **user.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: db.TimestampString;
      /**
      * **user.user_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_user_id_seq'::regclass)`
      */
      user_id: number;
    }
    export interface Whereable {
      /**
      * **user.college**
      * - `varchar` in database
      * - Nullable, no default
      */
      college?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.last_login_at**
      * - `timestamp` in database
      * - Nullable, no default
      */
      last_login_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.subject**
      * - `varchar` in database
      * - Nullable, no default
      */
      subject?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **user.user_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_user_id_seq'::regclass)`
      */
      user_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **user.college**
      * - `varchar` in database
      * - Nullable, no default
      */
      college?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **user.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **user.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user.last_login_at**
      * - `timestamp` in database
      * - Nullable, no default
      */
      last_login_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **user.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **user.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **user.subject**
      * - `varchar` in database
      * - Nullable, no default
      */
      subject?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **user.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **user.user_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_user_id_seq'::regclass)`
      */
      user_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **user.college**
      * - `varchar` in database
      * - Nullable, no default
      */
      college?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **user.created_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **user.email**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user.last_login_at**
      * - `timestamp` in database
      * - Nullable, no default
      */
      last_login_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **user.name**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user.password**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      password?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user.role**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      role?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **user.status**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      status?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **user.subject**
      * - `varchar` in database
      * - Nullable, no default
      */
      subject?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **user.updated_at**
      * - `timestamp` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampString | Date) | db.Parameter<(db.TimestampString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **user.user_id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('user_user_id_seq'::regclass)`
      */
      user_id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'user_email_key' | 'user_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = exam.Table | exam_chat.Table | exam_participant.Table | flag.Table | group_membership.Table | open_ai_assistant.Table | persona.Table | persona_access.Table | persona_flag.Table | student_group.Table | user.Table;
    export type Selectable = exam.Selectable | exam_chat.Selectable | exam_participant.Selectable | flag.Selectable | group_membership.Selectable | open_ai_assistant.Selectable | persona.Selectable | persona_access.Selectable | persona_flag.Selectable | student_group.Selectable | user.Selectable;
    export type JSONSelectable = exam.JSONSelectable | exam_chat.JSONSelectable | exam_participant.JSONSelectable | flag.JSONSelectable | group_membership.JSONSelectable | open_ai_assistant.JSONSelectable | persona.JSONSelectable | persona_access.JSONSelectable | persona_flag.JSONSelectable | student_group.JSONSelectable | user.JSONSelectable;
    export type Whereable = exam.Whereable | exam_chat.Whereable | exam_participant.Whereable | flag.Whereable | group_membership.Whereable | open_ai_assistant.Whereable | persona.Whereable | persona_access.Whereable | persona_flag.Whereable | student_group.Whereable | user.Whereable;
    export type Insertable = exam.Insertable | exam_chat.Insertable | exam_participant.Insertable | flag.Insertable | group_membership.Insertable | open_ai_assistant.Insertable | persona.Insertable | persona_access.Insertable | persona_flag.Insertable | student_group.Insertable | user.Insertable;
    export type Updatable = exam.Updatable | exam_chat.Updatable | exam_participant.Updatable | flag.Updatable | group_membership.Updatable | open_ai_assistant.Updatable | persona.Updatable | persona_access.Updatable | persona_flag.Updatable | student_group.Updatable | user.Updatable;
    export type UniqueIndex = exam.UniqueIndex | exam_chat.UniqueIndex | exam_participant.UniqueIndex | flag.UniqueIndex | group_membership.UniqueIndex | open_ai_assistant.UniqueIndex | persona.UniqueIndex | persona_access.UniqueIndex | persona_flag.UniqueIndex | student_group.UniqueIndex | user.UniqueIndex;
    export type Column = exam.Column | exam_chat.Column | exam_participant.Column | flag.Column | group_membership.Column | open_ai_assistant.Column | persona.Column | persona_access.Column | persona_flag.Column | student_group.Column | user.Column;
  
    export type AllBaseTables = [exam.Table, exam_chat.Table, exam_participant.Table, flag.Table, group_membership.Table, open_ai_assistant.Table, persona.Table, persona_access.Table, persona_flag.Table, student_group.Table, user.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [exam.Table, exam_chat.Table, exam_participant.Table, flag.Table, group_membership.Table, open_ai_assistant.Table, persona.Table, persona_access.Table, persona_flag.Table, student_group.Table, user.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'public';
  export type Table = public.Table;
  export type Selectable = public.Selectable;
  export type JSONSelectable = public.JSONSelectable;
  export type Whereable = public.Whereable;
  export type Insertable = public.Insertable;
  export type Updatable = public.Updatable;
  export type UniqueIndex = public.UniqueIndex;
  export type Column = public.Column;

  export type AllSchemas = ['public'];
  export type AllBaseTables = [...public.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables];
  export type AllViews = [...public.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "exam": exam.Selectable;
    "exam_chat": exam_chat.Selectable;
    "exam_participant": exam_participant.Selectable;
    "flag": flag.Selectable;
    "group_membership": group_membership.Selectable;
    "open_ai_assistant": open_ai_assistant.Selectable;
    "persona": persona.Selectable;
    "persona_access": persona_access.Selectable;
    "persona_flag": persona_flag.Selectable;
    "student_group": student_group.Selectable;
    "user": user.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "exam": exam.JSONSelectable;
    "exam_chat": exam_chat.JSONSelectable;
    "exam_participant": exam_participant.JSONSelectable;
    "flag": flag.JSONSelectable;
    "group_membership": group_membership.JSONSelectable;
    "open_ai_assistant": open_ai_assistant.JSONSelectable;
    "persona": persona.JSONSelectable;
    "persona_access": persona_access.JSONSelectable;
    "persona_flag": persona_flag.JSONSelectable;
    "student_group": student_group.JSONSelectable;
    "user": user.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "exam": exam.Whereable;
    "exam_chat": exam_chat.Whereable;
    "exam_participant": exam_participant.Whereable;
    "flag": flag.Whereable;
    "group_membership": group_membership.Whereable;
    "open_ai_assistant": open_ai_assistant.Whereable;
    "persona": persona.Whereable;
    "persona_access": persona_access.Whereable;
    "persona_flag": persona_flag.Whereable;
    "student_group": student_group.Whereable;
    "user": user.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "exam": exam.Insertable;
    "exam_chat": exam_chat.Insertable;
    "exam_participant": exam_participant.Insertable;
    "flag": flag.Insertable;
    "group_membership": group_membership.Insertable;
    "open_ai_assistant": open_ai_assistant.Insertable;
    "persona": persona.Insertable;
    "persona_access": persona_access.Insertable;
    "persona_flag": persona_flag.Insertable;
    "student_group": student_group.Insertable;
    "user": user.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "exam": exam.Updatable;
    "exam_chat": exam_chat.Updatable;
    "exam_participant": exam_participant.Updatable;
    "flag": flag.Updatable;
    "group_membership": group_membership.Updatable;
    "open_ai_assistant": open_ai_assistant.Updatable;
    "persona": persona.Updatable;
    "persona_access": persona_access.Updatable;
    "persona_flag": persona_flag.Updatable;
    "student_group": student_group.Updatable;
    "user": user.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "exam": exam.UniqueIndex;
    "exam_chat": exam_chat.UniqueIndex;
    "exam_participant": exam_participant.UniqueIndex;
    "flag": flag.UniqueIndex;
    "group_membership": group_membership.UniqueIndex;
    "open_ai_assistant": open_ai_assistant.UniqueIndex;
    "persona": persona.UniqueIndex;
    "persona_access": persona_access.UniqueIndex;
    "persona_flag": persona_flag.UniqueIndex;
    "student_group": student_group.UniqueIndex;
    "user": user.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "exam": exam.Column;
    "exam_chat": exam_chat.Column;
    "exam_participant": exam_participant.Column;
    "flag": flag.Column;
    "group_membership": group_membership.Column;
    "open_ai_assistant": open_ai_assistant.Column;
    "persona": persona.Column;
    "persona_access": persona_access.Column;
    "persona_flag": persona_flag.Column;
    "student_group": student_group.Column;
    "user": user.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "exam": exam.SQL;
    "exam_chat": exam_chat.SQL;
    "exam_participant": exam_participant.SQL;
    "flag": flag.SQL;
    "group_membership": group_membership.SQL;
    "open_ai_assistant": open_ai_assistant.SQL;
    "persona": persona.SQL;
    "persona_access": persona_access.SQL;
    "persona_flag": persona_flag.SQL;
    "student_group": student_group.SQL;
    "user": user.SQL;
  }[T];

}
